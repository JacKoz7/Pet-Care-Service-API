// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser            Int       @id @default(autoincrement())
  firebaseUid       String    @unique
  firstName         String?   @db.VarChar(45)
  lastName          String?   @db.VarChar(45)
  email             String?   @db.VarChar(70)
  phoneNumber       String?   @db.Char(9)
  lastActive        DateTime?
  profilePictureUrl String?   @db.VarChar(1000)
  City              City      @relation(fields: [City_idCity], references: [idCity])
  City_idCity       Int

  // Relacje
  ServiceProviders Service_Provider[]
  Clients          Client[]
  Admin            Admin?
}

model Admin {
  idAdmin     Int  @id @default(autoincrement())
  User        User @relation(fields: [User_idUser], references: [idUser])
  User_idUser Int  @unique
}

model City {
  idCity   Int     @id @default(autoincrement())
  name     String  @unique @db.VarChar(70)
  imageUrl String? @db.VarChar(500)
  Users    User[]
}

model Service_Provider {
  idService_Provider Int     @id @default(autoincrement())
  User               User    @relation(fields: [User_idUser], references: [idUser])
  User_idUser        Int
  isActive           Boolean @default(true)

  Advertisements         Advertisement[]
  ArchivedAdvertisements AdvertisementArchive[] @relation("ServiceProviderToAdvertisementArchive")
  Bookings               Booking[]
  Availabilities         Availability[]
  Feedbacks              Feedback[]
}

model Availability {
  idAvailability Int       @id @default(autoincrement())
  dayOfWeek      DayOfWeek
  startTime      DateTime  @db.Time
  endTime        DateTime  @db.Time

  Service_Provider                    Service_Provider @relation(fields: [Service_Provider_idService_Provider], references: [idService_Provider])
  Service_Provider_idService_Provider Int
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Advertisement {
  idAdvertisement                     Int                 @id @default(autoincrement())
  title                               String              @db.VarChar(100)
  description                         String?             @db.VarChar(1000)
  price                               Float?
  status                              StatusAdvertisement @default(ACTIVE)
  startDate                           DateTime            @default(now())
  endDate                             DateTime
  createdAt                           DateTime            @default(now())
  serviceStartTime                    DateTime?           @db.Time
  serviceEndTime                      DateTime?           @db.Time
  Service                             Service             @relation(fields: [Service_idService], references: [idService])
  Service_idService                   Int
  Service_Provider                    Service_Provider    @relation(fields: [Service_Provider_idService_Provider], references: [idService_Provider])
  Service_Provider_idService_Provider Int

  Feedbacks Feedback[]
  Archives  Archive[]
  Images    AdvertisementImage[]

  @@unique([title, Service_Provider_idService_Provider])
}

enum StatusAdvertisement {
  ACTIVE
  INACTIVE
  PENDING
  BOOKED
}

model Service {
  idService Int    @id @default(autoincrement())
  name      String @unique @db.VarChar(120)

  Advertisements         Advertisement[]
  ArchivedAdvertisements AdvertisementArchive[] @relation("ServiceToAdvertisementArchive")
}

model Booking {
  idBooking     Int      @id @default(autoincrement())
  startDateTime DateTime
  endDateTime   DateTime

  Client                              Client           @relation(fields: [Client_idClient], references: [idClient])
  Client_idClient                     Int
  Service_Provider                    Service_Provider @relation(fields: [Service_Provider_idService_Provider], references: [idService_Provider])
  Service_Provider_idService_Provider Int
}

model Client {
  idClient    Int  @id @default(autoincrement())
  User        User @relation(fields: [User_idUser], references: [idUser])
  User_idUser Int

  Bookings  Booking[]
  Feedbacks Feedback[]
  Pets      Pet[]
}

model Feedback {
  idFeedback  Int     @id @default(autoincrement())
  rate        Decimal @db.Decimal(2, 1)
  description String? @db.VarChar(500)

  Client                              Client           @relation(fields: [Client_idClient], references: [idClient])
  Client_idClient                     Int
  Advertisement                       Advertisement    @relation(fields: [Advertisement_idAdvertisement], references: [idAdvertisement])
  Advertisement_idAdvertisement       Int
  Service_Provider                    Service_Provider @relation(fields: [Service_Provider_idService_Provider], references: [idService_Provider])
  Service_Provider_idService_Provider Int
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

enum ActivityLevel {
  LOW
  MEDIUM
  HIGH
}

enum DietType {
  DRY
  WET
  BARF
  HOMEMADE
  OTHER
}

enum EnvironmentType {
  INDOOR
  OUTDOOR
  MIXED
}

enum Severity {
  LOW
  MODERATE
  HIGH
}

model Pet {
  idPet           Int      @id @default(autoincrement())
  name            String   @db.VarChar(45)
  age             Decimal  @db.Decimal(3, 0)
  description     String?  @db.VarChar(500)
  chronicDiseases String[] @default([])
  isHealthy       Boolean? 

  Breed           Breed      @relation(fields: [Breed_idBreed], references: [idBreed])
  Breed_idBreed   Int
  Client          Client     @relation(fields: [Client_idClient], references: [idClient])
  Client_idClient Int
  Images          PetImage[]
  Archives        Archive[]
  Analyses        Analysis[]
}

model PetImage {
  idPetImage Int    @id @default(autoincrement())
  imageUrl   String @db.VarChar(1000)
  order      Int?

  Pet       Pet @relation(fields: [Pet_idPet], references: [idPet])
  Pet_idPet Int
}

model Breed {
  idBreed Int    @id @default(autoincrement())
  name    String @db.VarChar(60)

  Spiece          Spiece @relation(fields: [Spiece_idSpiece], references: [idSpiece])
  Spiece_idSpiece Int

  Pets Pet[]
}

model Spiece {
  idSpiece Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(60)

  Breeds Breed[]
}

model Archive {
  idArchive Int           @id @default(autoincrement())
  date      DateTime
  status    StatusArchive @default(COMPLETED)

  Pet                           Pet           @relation(fields: [Pet_idPet], references: [idPet])
  Pet_idPet                     Int
  Advertisement                 Advertisement @relation(fields: [Advertisement_idAdvertisement], references: [idAdvertisement])
  Advertisement_idAdvertisement Int
}

enum StatusArchive {
  COMPLETED
  CANCELLED
  PENDING
}

model AdvertisementArchive {
  idAdvertisementArchive  Int                 @id @default(autoincrement())
  originalAdvertisementId Int                 @unique
  title                   String              @db.VarChar(100)
  description             String?             @db.VarChar(1000)
  price                   Float?
  status                  StatusAdvertisement @default(INACTIVE)
  startDate               DateTime
  endDate                 DateTime
  createdAt               DateTime            @default(now())
  serviceStartTime        DateTime?           @db.Time
  serviceEndTime          DateTime?           @db.Time
  serviceId               Int
  serviceProviderId       Int
  deletedAt               DateTime            @default(now())
  imagesUrls              Json?

  Service          Service          @relation("ServiceToAdvertisementArchive", fields: [serviceId], references: [idService])
  Service_Provider Service_Provider @relation("ServiceProviderToAdvertisementArchive", fields: [serviceProviderId], references: [idService_Provider])

  @@index([originalAdvertisementId])
}

model AdvertisementImage {
  idAdvertisementImage Int    @id @default(autoincrement())
  imageUrl             String @db.VarChar(1000)
  order                Int?

  Advertisement                 Advertisement @relation(fields: [Advertisement_idAdvertisement], references: [idAdvertisement])
  Advertisement_idAdvertisement Int
}

model Symptom {
  idSymptom       Int      @id @default(autoincrement())
  code            String   @unique @db.VarChar(50)
  name            String   @db.VarChar(100)
  description     String?  @db.VarChar(500)
  defaultSeverity Severity @default(MODERATE)
}

model Analysis {
  idAnalysis Int      @id @default(autoincrement())
  inputData  Json
  diagnoses  Json
  createdAt  DateTime @default(now())

  Pet       Pet @relation(fields: [Pet_idPet], references: [idPet])
  Pet_idPet Int
}
